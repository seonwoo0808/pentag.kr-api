// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"pentag.kr/api-server/ent/contact"
	"pentag.kr/api-server/ent/predicate"
)

// ContactUpdate is the builder for updating Contact entities.
type ContactUpdate struct {
	config
	hooks    []Hook
	mutation *ContactMutation
}

// Where appends a list predicates to the ContactUpdate builder.
func (cu *ContactUpdate) Where(ps ...predicate.Contact) *ContactUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetFirstName sets the "first_name" field.
func (cu *ContactUpdate) SetFirstName(s string) *ContactUpdate {
	cu.mutation.SetFirstName(s)
	return cu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableFirstName(s *string) *ContactUpdate {
	if s != nil {
		cu.SetFirstName(*s)
	}
	return cu
}

// SetLastName sets the "last_name" field.
func (cu *ContactUpdate) SetLastName(s string) *ContactUpdate {
	cu.mutation.SetLastName(s)
	return cu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableLastName(s *string) *ContactUpdate {
	if s != nil {
		cu.SetLastName(*s)
	}
	return cu
}

// SetEmail sets the "email" field.
func (cu *ContactUpdate) SetEmail(s string) *ContactUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableEmail(s *string) *ContactUpdate {
	if s != nil {
		cu.SetEmail(*s)
	}
	return cu
}

// SetPhone sets the "phone" field.
func (cu *ContactUpdate) SetPhone(s string) *ContactUpdate {
	cu.mutation.SetPhone(s)
	return cu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (cu *ContactUpdate) SetNillablePhone(s *string) *ContactUpdate {
	if s != nil {
		cu.SetPhone(*s)
	}
	return cu
}

// SetCategory sets the "category" field.
func (cu *ContactUpdate) SetCategory(i int) *ContactUpdate {
	cu.mutation.ResetCategory()
	cu.mutation.SetCategory(i)
	return cu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableCategory(i *int) *ContactUpdate {
	if i != nil {
		cu.SetCategory(*i)
	}
	return cu
}

// AddCategory adds i to the "category" field.
func (cu *ContactUpdate) AddCategory(i int) *ContactUpdate {
	cu.mutation.AddCategory(i)
	return cu
}

// SetMessage sets the "message" field.
func (cu *ContactUpdate) SetMessage(s string) *ContactUpdate {
	cu.mutation.SetMessage(s)
	return cu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableMessage(s *string) *ContactUpdate {
	if s != nil {
		cu.SetMessage(*s)
	}
	return cu
}

// SetVerifyCode sets the "verify_code" field.
func (cu *ContactUpdate) SetVerifyCode(s string) *ContactUpdate {
	cu.mutation.SetVerifyCode(s)
	return cu
}

// SetNillableVerifyCode sets the "verify_code" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableVerifyCode(s *string) *ContactUpdate {
	if s != nil {
		cu.SetVerifyCode(*s)
	}
	return cu
}

// SetIsVerified sets the "is_verified" field.
func (cu *ContactUpdate) SetIsVerified(b bool) *ContactUpdate {
	cu.mutation.SetIsVerified(b)
	return cu
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableIsVerified(b *bool) *ContactUpdate {
	if b != nil {
		cu.SetIsVerified(*b)
	}
	return cu
}

// Mutation returns the ContactMutation object of the builder.
func (cu *ContactUpdate) Mutation() *ContactMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ContactUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ContactUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ContactUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ContactUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ContactUpdate) check() error {
	if v, ok := cu.mutation.FirstName(); ok {
		if err := contact.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Contact.first_name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.LastName(); ok {
		if err := contact.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Contact.last_name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Email(); ok {
		if err := contact.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Contact.email": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Phone(); ok {
		if err := contact.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Contact.phone": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Category(); ok {
		if err := contact.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Contact.category": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Message(); ok {
		if err := contact.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "Contact.message": %w`, err)}
		}
	}
	if v, ok := cu.mutation.VerifyCode(); ok {
		if err := contact.VerifyCodeValidator(v); err != nil {
			return &ValidationError{Name: "verify_code", err: fmt.Errorf(`ent: validator failed for field "Contact.verify_code": %w`, err)}
		}
	}
	return nil
}

func (cu *ContactUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(contact.Table, contact.Columns, sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.FirstName(); ok {
		_spec.SetField(contact.FieldFirstName, field.TypeString, value)
	}
	if value, ok := cu.mutation.LastName(); ok {
		_spec.SetField(contact.FieldLastName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.SetField(contact.FieldEmail, field.TypeString, value)
	}
	if value, ok := cu.mutation.Phone(); ok {
		_spec.SetField(contact.FieldPhone, field.TypeString, value)
	}
	if value, ok := cu.mutation.Category(); ok {
		_spec.SetField(contact.FieldCategory, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedCategory(); ok {
		_spec.AddField(contact.FieldCategory, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Message(); ok {
		_spec.SetField(contact.FieldMessage, field.TypeString, value)
	}
	if value, ok := cu.mutation.VerifyCode(); ok {
		_spec.SetField(contact.FieldVerifyCode, field.TypeString, value)
	}
	if value, ok := cu.mutation.IsVerified(); ok {
		_spec.SetField(contact.FieldIsVerified, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ContactUpdateOne is the builder for updating a single Contact entity.
type ContactUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContactMutation
}

// SetFirstName sets the "first_name" field.
func (cuo *ContactUpdateOne) SetFirstName(s string) *ContactUpdateOne {
	cuo.mutation.SetFirstName(s)
	return cuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableFirstName(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetFirstName(*s)
	}
	return cuo
}

// SetLastName sets the "last_name" field.
func (cuo *ContactUpdateOne) SetLastName(s string) *ContactUpdateOne {
	cuo.mutation.SetLastName(s)
	return cuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableLastName(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetLastName(*s)
	}
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *ContactUpdateOne) SetEmail(s string) *ContactUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableEmail(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetEmail(*s)
	}
	return cuo
}

// SetPhone sets the "phone" field.
func (cuo *ContactUpdateOne) SetPhone(s string) *ContactUpdateOne {
	cuo.mutation.SetPhone(s)
	return cuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillablePhone(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetPhone(*s)
	}
	return cuo
}

// SetCategory sets the "category" field.
func (cuo *ContactUpdateOne) SetCategory(i int) *ContactUpdateOne {
	cuo.mutation.ResetCategory()
	cuo.mutation.SetCategory(i)
	return cuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableCategory(i *int) *ContactUpdateOne {
	if i != nil {
		cuo.SetCategory(*i)
	}
	return cuo
}

// AddCategory adds i to the "category" field.
func (cuo *ContactUpdateOne) AddCategory(i int) *ContactUpdateOne {
	cuo.mutation.AddCategory(i)
	return cuo
}

// SetMessage sets the "message" field.
func (cuo *ContactUpdateOne) SetMessage(s string) *ContactUpdateOne {
	cuo.mutation.SetMessage(s)
	return cuo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableMessage(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetMessage(*s)
	}
	return cuo
}

// SetVerifyCode sets the "verify_code" field.
func (cuo *ContactUpdateOne) SetVerifyCode(s string) *ContactUpdateOne {
	cuo.mutation.SetVerifyCode(s)
	return cuo
}

// SetNillableVerifyCode sets the "verify_code" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableVerifyCode(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetVerifyCode(*s)
	}
	return cuo
}

// SetIsVerified sets the "is_verified" field.
func (cuo *ContactUpdateOne) SetIsVerified(b bool) *ContactUpdateOne {
	cuo.mutation.SetIsVerified(b)
	return cuo
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableIsVerified(b *bool) *ContactUpdateOne {
	if b != nil {
		cuo.SetIsVerified(*b)
	}
	return cuo
}

// Mutation returns the ContactMutation object of the builder.
func (cuo *ContactUpdateOne) Mutation() *ContactMutation {
	return cuo.mutation
}

// Where appends a list predicates to the ContactUpdate builder.
func (cuo *ContactUpdateOne) Where(ps ...predicate.Contact) *ContactUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ContactUpdateOne) Select(field string, fields ...string) *ContactUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Contact entity.
func (cuo *ContactUpdateOne) Save(ctx context.Context) (*Contact, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ContactUpdateOne) SaveX(ctx context.Context) *Contact {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ContactUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ContactUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ContactUpdateOne) check() error {
	if v, ok := cuo.mutation.FirstName(); ok {
		if err := contact.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Contact.first_name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.LastName(); ok {
		if err := contact.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Contact.last_name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Email(); ok {
		if err := contact.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Contact.email": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Phone(); ok {
		if err := contact.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Contact.phone": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Category(); ok {
		if err := contact.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Contact.category": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Message(); ok {
		if err := contact.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "Contact.message": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.VerifyCode(); ok {
		if err := contact.VerifyCodeValidator(v); err != nil {
			return &ValidationError{Name: "verify_code", err: fmt.Errorf(`ent: validator failed for field "Contact.verify_code": %w`, err)}
		}
	}
	return nil
}

func (cuo *ContactUpdateOne) sqlSave(ctx context.Context) (_node *Contact, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(contact.Table, contact.Columns, sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Contact.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contact.FieldID)
		for _, f := range fields {
			if !contact.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.FirstName(); ok {
		_spec.SetField(contact.FieldFirstName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.LastName(); ok {
		_spec.SetField(contact.FieldLastName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.SetField(contact.FieldEmail, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Phone(); ok {
		_spec.SetField(contact.FieldPhone, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Category(); ok {
		_spec.SetField(contact.FieldCategory, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedCategory(); ok {
		_spec.AddField(contact.FieldCategory, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Message(); ok {
		_spec.SetField(contact.FieldMessage, field.TypeString, value)
	}
	if value, ok := cuo.mutation.VerifyCode(); ok {
		_spec.SetField(contact.FieldVerifyCode, field.TypeString, value)
	}
	if value, ok := cuo.mutation.IsVerified(); ok {
		_spec.SetField(contact.FieldIsVerified, field.TypeBool, value)
	}
	_node = &Contact{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
